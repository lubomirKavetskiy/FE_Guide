//*Easy*
//counter
const counter = (n) => () => n++;

const result = counter(1);
console.log(result()); //1
console.log(result()); //2 
console.log(result()); //3

//twoSum
const twoSum = (nums, target) => {
  for (let i = 0; i < nums.length; i++) {
    const diff = target - nums[i];
    const idx = nums.findIndex((el, index) => index !== i && el === diff);

    if (idx !== -1) return [i, idx];
  }
};

console.log(twoSum([3, 2, 4], 6)); //[1,2]

//own reducer
const reduce = function(nums, fn, init) {
  let acc = init;

  for(let val of nums) {
    acc = fn(acc, val);
  }

  return acc;
};
console.log(reduce([1,2,3], fn=(acc, curr)=>acc+curr, 10)); //16

//own filter
const filter = function(arr, fn) {
    const res = [];

    for(let i=0; i<arr.length; i++) {
        fn(arr[i], i) && res.push(arr[i]);
    };

    return res;
};
console.log(filter([10, 20, 30], (n)=>n>10)); //[20, 30]

//own map
const map = function(arr, fn) {
    const res = [];

    for(let i=0; i<arr.length; i++) {
        res[i] = fn(arr[i], i);
    };

    return res;
};
console.log(map([1,2], (x)=>x+5)); //[6,7]


const alignArr = (arr) => {
  let res = [];

  const recursFoo = (ell) => {
    for(let i=0; i<ell.length; i++) {
      if(typeof ell[i] !== 'number') {
        return recursFoo(ell[i]);
      } else {
        res.push(ell[i])
      }
    }
  };

  recursFoo(arr);

  return res;
};

console.log(alignArr([1, 2, [3, [4,5]]]));// [1,2,3,4,5]

const isPalindrome = (x) => {
  const str = x.toString();
	const arr = Array.from(str).reverse();

	return str === arr.join('');
};
//isPalindrom(121); //true
//isPalindrom(-121); //false


const isSubstringRepeated = str => (str+str).substring(1, str.length*2 - 1).includes(str);
isSubstringPattern('aba') // false
isSubstringPattern('abab') // true
isSubstringPattern('abcabc') // true

//
const wordPattern = (pattern, s) => {
  const arr = s.split(' ');
  const obj = {};
  
	for(let i=0; i<arr.length; i++) {
    const currPattern = pattern[i];
    const currArr = arr[i];

    if(!obj[currPattern]) { 
      obj[currPattern] = currArr;
    } else {
      if(obj[currPattern] !== currArr) return false;
    }
  };
  
  return true;
};

console.log(wordPattern('abbaa', 'cat dog dog cat cat')); //true
console.log(wordPattern('abcc', 'cat dog fox dog')); //false

//Promise Time Limit
const timeLimit = (fn, t) => {
    return function() {
        const foo = fn(...arguments);
        const bar = new Promise((_, rejected) => {
            setTimeout(()=>rejected("Time Limit Exceeded", `time=${t}`), t);
        });

        return Promise.race([foo, bar]);
    }
};
const limited = timeLimit((t) => new Promise(res => setTimeout(res, t)), 100);
limited(150).catch(console.log) // "Time Limit Exceeded" at t=100ms

//game towerOfHanoi
const towerOfHanoi = (n, start, finish, additional) => {
  if (n > 0) {
    towerOfHanoi(n - 1, start, additional, finish);
    console.log(`move disc ${n} from ${start} to ${finish}`);
    towerOfHanoi(n - 1, additional, finish, start);
  }
};

const towerOfHanoi_1 = (n, start, additional, finish) => {
  if (n > 0) {
    towerOfHanoi_1(n - 1, start, finish, additional);
    console.log(`move disc ${n} from ${start} to ${finish}`);
    towerOfHanoi_1(n - 1, additional, start, finish);
  }
};

towerOfHanoi(3, "A", "B", "C");

// lengthOfLongestSubstring
const lengthOfLongestSubstring = (str) => {
  let maxSize = 0;
  let left = 0;
  let set = new Set();

  for (let i = 0; i < str.length; i++) {
    const currItem = str[i];

    while (set.has(currItem)) {
      set.delete(str[left]);
      left++;
    }

    set.add(currItem);
    maxSize = Math.max(maxSize, i - left + 1);
  }

  return maxSize;
};
